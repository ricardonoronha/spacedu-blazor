@page "/Customers/List"

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ICustomerRepository CustomerRepository

<div class="col-xl-12">
    <div class="card">
        <div class="card-header align-items-center d-flex">
            <h4 class="card-title mb-0 flex-grow-1">Lista de Clientes</h4>
        </div>

        <form @onsubmit="()=> NavigateToPage(1)">
            <div class="input-group p-2">
                <InputText @bind-Value="SearchWord" type="text" class="form-control" aria-label="Recipient's username" aria-describedby="button-addon2" />
                <button class="btn btn-outline-info material-shadow-none" type="submit" id="button-addon2">Pesquisar</button>
            </div>
        </form>


        <div class="card-body">

            <div class="table-responsive table-card">
                <table class="table table-hover table-centered align-middle table-nowrap mb-0">
                    <thead>
                        <tr>
                            <th scope="col">Nome @SearchWord</th>
                            <th scope="col">Cidade</th>
                            <th scope="col"></th>

                        </tr>
                    </thead>
                    <tbody>
                        @if (PaginatedList is not null)
                        {
                            @foreach (var customer in PaginatedList.Data)
                            {
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-sm bg-light rounded p-1 me-2">
                                                <img src="@customer.ImageUrl" alt="" class="img-fluid d-block" style="max-height: 50px">
                                            </div>
                                            <div>
                                                <h5 class="fs-14 my-1"><a href="apps-ecommerce-product-details.html" class="text-reset">@customer.Name</a></h5>
                                                <span class="text-muted">FEBRABAN: @customer.Febraban</span>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <h5 class="fs-14 my-1 fw-normal">@customer.TownName - @customer.State</h5>
                                    </td>

                                    <td>
                                        <div class="fs-14 my-1 fw-normal">
                                            <div class="hstack flex-wrap">
                                                <div class="select m-1">
                                                    <button class="btn btn-sm btn-soft-info edit-item-btn" data-bs-toggle="modal" data-bs-target="#showModal">
                                                        <i class=" ri-arrow-right-circle-line"></i> Selecionar
                                                    </button>
                                                </div>

                                                <div class="edit m-1">
                                                    <button class="btn btn-sm btn-soft-success edit-item-btn" data-bs-toggle="modal" data-bs-target="#showModal">
                                                        <i class="ri-edit-2-line"></i> Editar
                                                    </button>
                                                </div>

                                                <div class="edit m-1">
                                                    <button class="btn btn-sm btn-soft-danger edit-item-btn" data-bs-toggle="modal" data-bs-target="#showModal">
                                                        <i class="ri-edit-2-line"></i> Deletar
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
            </div>

            @if (PaginatedList is not null)
            {
                <div class="align-items-center mt-4 pt-2 justify-content-between row text-center text-sm-start">
                    <div class="col-sm">
                        <div class="text-muted">
                            Mostrando página <span class="fw-semibold">@PaginatedList.PageIndex.ToString("00")</span> de <span class="fw-semibold">@PaginatedList.TotalPages.ToString("00")</span> Results
                        </div>
                    </div>
                    <div class="col-sm-auto  mt-3 mt-sm-0">
                        <ul class="pagination pagination-separated pagination-sm mb-0 justify-content-center">

                            <li class="page-item @(PaginatedList.HasPreviousPage ? "" : "disabled" )">
                                <button @onclick="()=> NavigateToPage(PaginatedList.PageIndex - 1)" class="page-link">←</button>
                            </li>
                          
                            @foreach (var nearPage in PaginatedList.GetVisiblePages())
                            {
                                int pageNumber = nearPage;
                                string activeClass = pageNumber == PaginatedList.PageIndex ? "active" : "";

                                <li class="page-item @activeClass">
                                    <button @onclick="()=> NavigateToPage(pageNumber)" class="page-link">@pageNumber</button>
                                </li>
                            }

                            <li class="page-item @(PaginatedList.HasNextPage ? "" : "disabled")">
                                <button @onclick="()=> NavigateToPage(PaginatedList.PageIndex + 1)" class="page-link">→</button>
                            </li>


                        </ul>
                    </div>
                </div>
            }


        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private string SearchWord { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    private int PageIndex { get; set; } = 1;

    [SupplyParameterFromQuery]
    private int PageSize { get; set; } = 15;

    private PaginatedList<Customer>? PaginatedList = null;

    protected override async Task OnParametersSetAsync()
    {
        if (PageIndex == 0)
            PageIndex = 1;

        if (PageSize == 0)
            PageSize = 15;

        var search = new PaginatedSearchDto<CustomerSearchDto>(new(SearchWord), PageIndex, PageSize);
        PaginatedList = await CustomerRepository.SearchAsync(search, CancellationToken.None);

    }

    private void NavigateToPage(int pageNumber)
    {
        NavigationManager.NavigateTo($"/Customers/List?SearchWord={SearchWord}&PageIndex={pageNumber}&PageSize={PageSize}");
    }



}
